Запрос №1
Есть статичная страница HTML, на которой имеются li элементы следующего вида:
<li>Data de <strong>23.12.2022 </strong>numărul:
<a href="http://cetatenie.just.ro/wp-content/uploads/2022/01/Ordin-1440P-23-12-2022-NPE.pdf">1440P</a></li>
Дата есть всегда в тегах strong. Количество ссылок может быть любым - от 1 до бесконечности.
Текст 1440P в данном примере - номер дела, каждая ссылка относится именно к номеру дела.
У одного номера дела - одна ссылка. Номера дел относятся к датам - у одной даты может быть много дел.
Напиши компилируемый код программы на golang, который парсит страницу html и складывает в массив структур даты,
номера дел и ссылки на эти номера дел.

Запрос №2.
напиши компилируемый код на golang, который получает текст сайта и ищет в нем данные, складывая их в структуру. Каждый экземпляр данных должен содержать дату, имя файла PDF, ссылку скачивания и номер в формате "ЧислоP".
Данные выглядят следующим образом:
<li>Data de <strong>03.02.2023 </strong>numărul: <a href="http://cetatenie.just.ro/wp-content/uploads/2022/01/Ordin-132-art-11-288-pers.pdf">132P</a> <a href="http://cetatenie.just.ro/wp-content/uploads/2022/01/Ordin-134-art-11-101-pers-.pdf">134P</a> <a href="http://cetatenie.just.ro/wp-content/uploads/2022/01/Ordin-135-art-11-293-pers-.pdf">135P</a></li>
На одну дату может приходиться минимум одна связка файл+ссылка+номер, но их может быть и много, надо это предусмотреть

Запрос №3
Напиши структуру проекта под  гексоганальную архитектуру golang.
Есть телеграм бот, база данных, скачивание файлов из интернета и их парсинг. Данные после парсинга заносятся в БД, а телеграм бот отдает их по запросу пользователя

Ответ:
1. cmd/
    - main.go
2. internal/
    - app/
        - application.go
        - telegram/
            - bot.go
        - parser/
            - parser.go
        - repository/
            - database.go
        - service/
            - file_downloader.go
    - domain/
        - model.go
    - infrastructure/
        - database/
            - postgresql.go
        - downloader/
            - http_downloader.go
3. pkg/
    - config/
        - config.go
    - logger/
        - logger.go
4. vendor/
5. go.mod
6. go.sum

Объяснение структуры:
- cmd/ содержит точку входа в приложение (main.go).
- internal/ содержит все компоненты приложения, которые не будут использоваться вне приложения.
- internal/app/ содержит приложение и его компоненты.
- internal/app/application.go содержит интерфейс приложения и его реализацию.
- internal/app/telegram/ содержит компоненты телеграм бота.
- internal/app/parser/ содержит компоненты парсера.
- internal/app/repository/ содержит компоненты для работы с базой данных.
- internal/app/service/ содержит компоненты для скачивания файлов.
- internal/domain/ содержит модели данных приложения.
- internal/infrastructure/ содержит компоненты инфраструктуры, такие как база данных и скачиватель файлов.
- internal/infrastructure/database/ содержит реализацию базы данных.
- internal/infrastructure/downloader/ содержит реализацию скачивателя файлов.
- pkg/ содержит общие компоненты, которые могут быть использованы в других проектах.
- pkg/config/ содержит компоненты для работы с конфигурационными файлами.
- pkg/logger/ содержит компоненты для логирования.
- vendor/ содержит зависимости проекта.
- go.mod и go.sum - файлы для управления зависимостями проекта.

Запрос №4
Я хочу создать пакет, который смогу использовать во многих своих проектах. Этот пакет должен упросить работу с файлами и папками.
С файлами он должен:
- проверять, существует ли файл
- создавать, читать, дозаписывать, удалять, перемещать, переименовывать файл
- выдавать хэш содержимого файла
- сравнивать файлы по хэшам содержимого
- предоставлять информацию о файле (имя, расширение, путь, дата создания, дата обновления, размер файла, наименование приложения, связанного с файлом).
Для папок:
- проверять, существует ли папка
- создавать, удалять, перемещать, переименовывать папку
- предоставлять информацию о папке (имя, путь, дата создания, дата обновления, размер папки)
- предоставлять информацию о содержимом папки (количество вложенных папок и файлов)
- предоставлять список вложенных файлов и папок.
Создай модуль на Go 